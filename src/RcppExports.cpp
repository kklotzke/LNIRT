// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Rcpp_SimulateRT
arma::mat Rcpp_SimulateRT(const arma::mat& RT, const arma::vec& zeta, const arma::vec& lambda, const arma::vec& phi, const arma::vec& sigma2, const arma::mat DT);
RcppExport SEXP LNIRT_Rcpp_SimulateRT(SEXP RTSEXP, SEXP zetaSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP sigma2SEXP, SEXP DTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type DT(DTSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SimulateRT(RT, zeta, lambda, phi, sigma2, DT));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SimulateY
arma::mat Rcpp_SimulateY(const arma::mat& Y, const arma::vec& theta, const arma::vec& alpha0, const arma::vec& beta0, const arma::vec& guess0, const arma::mat& D);
RcppExport SEXP LNIRT_Rcpp_SimulateY(SEXP YSEXP, SEXP thetaSEXP, SEXP alpha0SEXP, SEXP beta0SEXP, SEXP guess0SEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type guess0(guess0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SimulateY(Y, theta, alpha0, beta0, guess0, D));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawZeta
arma::vec Rcpp_DrawZeta(const arma::mat& RT, const arma::vec& phi, const arma::vec& lambda, const arma::vec& sigma2, const arma::vec& mu, const double sigmaz);
RcppExport SEXP LNIRT_Rcpp_DrawZeta(SEXP RTSEXP, SEXP phiSEXP, SEXP lambdaSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP sigmazSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmaz(sigmazSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawZeta(RT, phi, lambda, sigma2, mu, sigmaz));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SampleB
List Rcpp_SampleB(const arma::mat& Y, const arma::vec& X, const arma::mat& Sigma, const arma::vec& B0, const arma::mat& V0);
RcppExport SEXP LNIRT_Rcpp_SampleB(SEXP YSEXP, SEXP XSEXP, SEXP SigmaSEXP, SEXP B0SEXP, SEXP V0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V0(V0SEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SampleB(Y, X, Sigma, B0, V0));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_rwishart
arma::mat Rcpp_rwishart(const int nu, const arma::mat V);
RcppExport SEXP LNIRT_Rcpp_rwishart(SEXP nuSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_rwishart(nu, V));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawLambdaPhi_LNRT
Rcpp::List Rcpp_DrawLambdaPhi_LNRT(const arma::mat& RT, const arma::vec& theta, const arma::vec& sigma2, const arma::mat muI, const arma::mat sigmaI, const arma::vec ingroup);
RcppExport SEXP LNIRT_Rcpp_DrawLambdaPhi_LNRT(SEXP RTSEXP, SEXP thetaSEXP, SEXP sigma2SEXP, SEXP muISEXP, SEXP sigmaISEXP, SEXP ingroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type muI(muISEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sigmaI(sigmaISEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ingroup(ingroupSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawLambdaPhi_LNRT(RT, theta, sigma2, muI, sigmaI, ingroup));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SampleS_LNRT
arma::vec Rcpp_SampleS_LNRT(const arma::mat& RT, const arma::vec& zeta, const arma::vec& lambda, const arma::vec& phi, const arma::vec& ingroup);
RcppExport SEXP LNIRT_Rcpp_SampleS_LNRT(SEXP RTSEXP, SEXP zetaSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP ingroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ingroup(ingroupSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SampleS_LNRT(RT, zeta, lambda, phi, ingroup));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawLambda_LNRT
arma::vec Rcpp_DrawLambda_LNRT(const arma::mat& RT, const arma::vec& zeta, const arma::vec& sigma2, const arma::vec& mu, const double sigma);
RcppExport SEXP LNIRT_Rcpp_DrawLambda_LNRT(SEXP RTSEXP, SEXP zetaSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawLambda_LNRT(RT, zeta, sigma2, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawS_LNIRT
List Rcpp_DrawS_LNIRT(const arma::vec& alpha0, const arma::vec& beta0, const arma::vec& guess0, const arma::vec& theta0, const arma::mat& Y);
RcppExport SEXP LNIRT_Rcpp_DrawS_LNIRT(SEXP alpha0SEXP, SEXP beta0SEXP, SEXP guess0SEXP, SEXP theta0SEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type guess0(guess0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawS_LNIRT(alpha0, beta0, guess0, theta0, Y));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawZ_LNIRT
arma::mat Rcpp_DrawZ_LNIRT(const arma::vec& alpha0, const arma::vec& beta0, const arma::vec& theta0, const arma::mat& S, const arma::mat& D, const arma::mat& eta, const bool PNO);
RcppExport SEXP LNIRT_Rcpp_DrawZ_LNIRT(SEXP alpha0SEXP, SEXP beta0SEXP, SEXP theta0SEXP, SEXP SSEXP, SEXP DSEXP, SEXP etaSEXP, SEXP PNOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const bool >::type PNO(PNOSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawZ_LNIRT(alpha0, beta0, theta0, S, D, eta, PNO));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawTheta_LNIRT
arma::vec Rcpp_DrawTheta_LNIRT(const arma::vec& alpha0, const arma::vec& beta0, const arma::mat& Z, const arma::vec& mu, const double sigma);
RcppExport SEXP LNIRT_Rcpp_DrawTheta_LNIRT(SEXP alpha0SEXP, SEXP beta0SEXP, SEXP ZSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawTheta_LNIRT(alpha0, beta0, Z, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawC_LNIRT
arma::fvec Rcpp_DrawC_LNIRT(const arma::mat& S, const arma::mat& Y);
RcppExport SEXP LNIRT_Rcpp_DrawC_LNIRT(SEXP SSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawC_LNIRT(S, Y));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawBeta_LNIRT
arma::vec Rcpp_DrawBeta_LNIRT(const arma::vec& theta, const arma::vec& alpha, const arma::mat& Z, const arma::vec& mu, const double sigma);
RcppExport SEXP LNIRT_Rcpp_DrawBeta_LNIRT(SEXP thetaSEXP, SEXP alphaSEXP, SEXP ZSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawBeta_LNIRT(theta, alpha, Z, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawLambda_LNIRT
arma::vec Rcpp_DrawLambda_LNIRT(const arma::mat& RT, const arma::vec& phi, const arma::vec& zeta, const arma::vec& sigma2, const arma::vec& mu, const double sigmal);
RcppExport SEXP LNIRT_Rcpp_DrawLambda_LNIRT(SEXP RTSEXP, SEXP phiSEXP, SEXP zetaSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP sigmalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmal(sigmalSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawLambda_LNIRT(RT, phi, zeta, sigma2, mu, sigmal));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawAlpha_LNIRT
arma::vec Rcpp_DrawAlpha_LNIRT(const arma::vec& theta, const arma::vec& beta, const arma::mat& Z, const arma::vec& mu, const double sigma);
RcppExport SEXP LNIRT_Rcpp_DrawAlpha_LNIRT(SEXP thetaSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawAlpha_LNIRT(theta, beta, Z, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_DrawPhi_LNIRT
arma::vec Rcpp_DrawPhi_LNIRT(const arma::mat& RT, const arma::vec& lambda, const arma::vec& zeta, const arma::vec& sigma2, const arma::vec& mu, const double sigmal);
RcppExport SEXP LNIRT_Rcpp_DrawPhi_LNIRT(SEXP RTSEXP, SEXP lambdaSEXP, SEXP zetaSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP sigmalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmal(sigmalSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_DrawPhi_LNIRT(RT, lambda, zeta, sigma2, mu, sigmal));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SampleS2_LNIRT
arma::vec Rcpp_SampleS2_LNIRT(const arma::mat& RT, const arma::vec& zeta, const arma::vec& lambda, const arma::vec& phi);
RcppExport SEXP LNIRT_Rcpp_SampleS2_LNIRT(SEXP RTSEXP, SEXP zetaSEXP, SEXP lambdaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SampleS2_LNIRT(RT, zeta, lambda, phi));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP LNIRT_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
